section .data
    num1 db 10
    num2 db 3

    even_msg db " is even", 10, 0
    odd_msg  db " is odd", 10, 0

    add_msg db "Addition: ", 0
    sub_msg db "Subtraction: ", 0
    mul_msg db "Multiplication: ", 0
    div_msg db "Division: ", 0

section .bss
    res resb 4          
section .text
    global _start

_start:
    ; ADDITION
    mov al, [num1]
    mov bl, [num2]
    add al, bl
    movzx eax, al       
    push eax
    mov eax, add_msg
    call print_string
    pop eax
    call print_number
    call check_even_odd

    ; SUBTRACTION
    mov al, [num1]
    sub al, bl
    movzx eax, al
    push eax
    mov eax, sub_msg
    call print_string
    pop eax
    call print_number
    call check_even_odd

    ; MULTIPLICATION
    mov al, [num1]
    mul bl              
    movzx eax, al
    push eax
    mov eax, mul_msg
    call print_string
    pop eax
    call print_number
    call check_even_odd

    ; DIVISION
    mov al, [num1]
    xor ah, ah          
    div bl             
    movzx eax, al
    push eax
    mov eax, div_msg
    call print_string
    pop eax
    call print_number
    call check_even_odd

    ; Exit
    mov eax, 1
    xor ebx, ebx
    int 0x80
print_number:
    mov ecx, res + 3    
    mov byte [ecx], 10  
    dec ecx

    mov ebx, 10
.convert:
    xor edx, edx
    div ebx
    add dl, '0'
    mov [ecx], dl
    dec ecx
    test eax, eax
    jnz .convert

    inc ecx             
    mov edx, res + 4
    sub edx, ecx

    mov eax, 4          
    mov ebx, 1          
    mov ecx, ecx
    int 0x80
    ret
print_string:
    mov ecx, eax
    mov edx, 0
.next_char:
    cmp byte [ecx+edx], 0
    je .done
    inc edx
    jmp .next_char
.done:
    mov eax, 4
    mov ebx, 1
    int 0x80
    ret
check_even_odd:
    test al, 1
    jz .even
    mov eax, odd_msg
    call print_string
    ret
.even:
    mov eax, even_msg
    call print_string
    ret

